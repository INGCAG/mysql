package com.example.spring.mysql.controller;

import com.example.spring.mysql.model.*;
import com.example.spring.mysql.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

@RestController
@RequestMapping(path = "/mySQL")
public class MyController {

    /*
    @Autowired
    private MyModel model;

    @RequestMapping(value = "/sayHello", method = RequestMethod.GET)
    public String sayHello() {
        model = new MyModel("Hello World!");
        return model.toString();
    }
    */
    /*
    readUser	-> GET		-> {idUser}			-> <User>
    createUser	-> POST	-> users/		-> <User>
    editUser	-> PUT		-> {id, <User>}	-> <User>
    listUsers	-> GET		-> users/		-> list(<User>)
    */

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private Users userRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private Roles roleRepository;

    @GetMapping(path="/listUsers") // Map ONLY GET Requests
    public @ResponseBody Iterable<User> listUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/readUser")
    public @ResponseBody
    Optional<User> readUser(@RequestParam String id){
        Long userId = Long.valueOf(id.toString());
        return userRepository.findById(userId);
    }

    @GetMapping(path="/listRoles")
    public @ResponseBody Iterable<Role> listRoles() {
        // This returns a JSON or XML with the users
        return roleRepository.findAll();
    }

    @GetMapping(path="/readRole")
    public @ResponseBody
    Optional<Role> readRole(@RequestParam String id){
        Long roleId = Long.valueOf(id.toString());
        return roleRepository.findById(roleId);
    }


    @RequestMapping(value = "/createUser", method = RequestMethod.POST)//userName=uni&password=zar&email=744163@unizar.es&idRole=1
    public String createUser(@RequestParam String userName, @RequestParam String password, @RequestParam String email, @RequestParam String idRole) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Long role = Long.valueOf(idRole);
        User u = new User(userName, password, email, role);
        userRepository.save(u);
        return "Saved";
    }
/*
    @RequestMapping(value = "/createUser", method = RequestMethod.PUT)//userName=uni&password=zar&email=744163@unizar.es&idRole=1
    public String editUser(@RequestParam String userName, @RequestParam String password, @RequestParam String email, @RequestParam String idRole) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Long role = Long.valueOf(idRole);
        User u = new User(userName, password, email, role);
        userRepository.update(u);
        return "Saved";
    }
    */
}
